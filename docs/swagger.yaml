definitions:
  auth.ChangePasswordRequest:
    properties:
      new_password:
        description: encoded password
        type: string
      old_password:
        description: encoded password
        type: string
      username:
        type: string
    type: object
  auth.CreateEmployeeRequest:
    properties:
      address:
        type: string
      date_of_birth:
        type: integer
      degree_name:
        type: string
      degree_year:
        type: integer
      department_id:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: integer
      last_name:
        type: string
      phone_number:
        type: string
      start_date:
        type: integer
      type:
        type: integer
    type: object
  auth.Department:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  auth.User:
    properties:
      address:
        type: string
      code:
        type: string
      date_of_birth:
        type: integer
      degree_name:
        type: string
      degree_year:
        type: integer
      department:
        $ref: '#/definitions/auth.Department'
      end_date:
        description: Off board date
        type: integer
      first_name:
        type: string
      gender:
        type: integer
      id:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      start_date:
        description: Onboard date
        type: integer
      state:
        type: integer
      username:
        type: string
    type: object
  authmodel.Departments:
    properties:
      departments:
        items:
          $ref: '#/definitions/auth.Department'
        type: array
      hasNext:
        type: boolean
      hasPrevious:
        type: boolean
      page:
        type: integer
      size:
        type: integer
      totalElements:
        description: Num items in all pages
        type: integer
      totalItems:
        description: Num items in current page
        type: integer
      totalPages:
        type: integer
    type: object
  authmodel.Employees:
    properties:
      employees:
        items:
          $ref: '#/definitions/auth.User'
        type: array
      hasNext:
        type: boolean
      hasPrevious:
        type: boolean
      page:
        type: integer
      size:
        type: integer
      totalElements:
        description: Num items in all pages
        type: integer
      totalItems:
        description: Num items in current page
        type: integer
      totalPages:
        type: integer
    type: object
  authmodel.GenerateLoginSecretRequest:
    properties:
      data:
        type: string
    type: object
  authmodel.GenerateLoginSecretResponse:
    properties:
      code:
        type: string
      data:
        $ref: '#/definitions/authmodel.LoginSecret'
    type: object
  authmodel.ListDepartment:
    properties:
      code:
        type: string
      data:
        $ref: '#/definitions/authmodel.Departments'
    type: object
  authmodel.ListEmployee:
    properties:
      code:
        type: string
      data:
        $ref: '#/definitions/authmodel.Employees'
    type: object
  authmodel.LoginResponse:
    properties:
      code:
        type: string
      next_step:
        type: integer
      token:
        type: string
      user:
        $ref: '#/definitions/auth.User'
    type: object
  authmodel.LoginSecret:
    properties:
      secret:
        type: string
    type: object
  basemodel.ApiEmptyResponse:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  basemodel.ApiError:
    properties:
      code:
        type: string
      details:
        items:
          $ref: '#/definitions/gcommon.ErrorDetail'
        type: array
      message:
        type: string
    type: object
  gcommon.ErrorDetail:
    properties:
      key:
        type: string
      message:
        type: string
    type: object
  patient.InpatientDetail:
    properties:
      admission_date:
        type: integer
      diagnosis:
        type: string
      discharge_date:
        type: integer
      doctor_id:
        type: string
      id:
        type: string
      inpatient_id:
        type: string
      invoice:
        $ref: '#/definitions/patient.Invoice'
      nurse_id:
        type: string
      sickroom:
        type: string
    type: object
  patient.Invoice:
    properties:
      due_date:
        type: integer
      id:
        type: string
      invoice_date:
        type: integer
      total_amount:
        type: number
    type: object
  patient.OutpatientDetail:
    properties:
      doctor_id:
        type: string
      id:
        type: string
      invoice:
        $ref: '#/definitions/patient.Invoice'
      outpatient_id:
        type: string
    type: object
  patient.Patient:
    properties:
      address:
        type: string
      date_of_birth:
        type: integer
      first_name:
        type: string
      gender:
        type: integer
      id:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
    type: object
  patient.PatientDetail:
    properties:
      inpatient_detail:
        $ref: '#/definitions/patient.InpatientDetail'
      outpatient_detail:
        $ref: '#/definitions/patient.OutpatientDetail'
      patient:
        $ref: '#/definitions/patient.Patient'
    type: object
  patient.UpsertPatientRequest:
    properties:
      address:
        type: string
      date_of_birth:
        type: integer
      first_name:
        type: string
      gender:
        type: integer
      id:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
    type: object
  patientmodel.GetPatientResponse:
    properties:
      code:
        type: string
      patientDetail:
        $ref: '#/definitions/patient.PatientDetail'
    type: object
  patientmodel.ListPatientResponse:
    properties:
      code:
        type: string
      data:
        $ref: '#/definitions/patientmodel.ListPatientResponseData'
    type: object
  patientmodel.ListPatientResponseData:
    properties:
      hasNext:
        type: boolean
      hasPrevious:
        type: boolean
      page:
        type: integer
      patients:
        items:
          $ref: '#/definitions/patient.PatientDetail'
        type: array
      size:
        type: integer
      totalElements:
        description: Num items in all pages
        type: integer
      totalItems:
        description: Num items in current page
        type: integer
      totalPages:
        type: integer
    type: object
info:
  contact: {}
paths:
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Employee Change Password
      parameters:
      - description: Change password Request
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/auth.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/basemodel.ApiEmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/basemodel.ApiError'
      security:
      - JWT: []
      summary: Employee Change Password
      tags:
      - SA - Auth
  /auth/create-employee:
    post:
      consumes:
      - application/json
      description: Create Employee
      parameters:
      - description: CreateEmployeeRequest Request
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/auth.CreateEmployeeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/basemodel.ApiEmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/basemodel.ApiError'
      security:
      - JWT: []
      summary: Create Employee
      tags:
      - SA - Auth
  /auth/list-department:
    get:
      consumes:
      - application/json
      description: List Department
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Sort field. Default to name,asc
        enum:
        - name
        - code
        in: query
        name: sort
        type: string
      - description: Ignore pagination and return all data
        in: query
        name: paging_ignored
        type: boolean
      - description: Search by name
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authmodel.ListDepartment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/basemodel.ApiError'
      security:
      - JWT: []
      summary: List Department
      tags:
      - SA - Auth
  /auth/list-employee:
    get:
      consumes:
      - application/json
      description: List Employee
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Sort field. Default to code,asc
        enum:
        - name
        - code
        in: query
        name: sort
        type: string
      - description: Ignore pagination and return all data
        in: query
        name: paging_ignored
        type: boolean
      - description: Filter by department id
        in: query
        name: department_id
        type: string
      - description: Search by name or email, code, phone number
        in: query
        name: search
        type: string
      - description: Filter by employee id
        in: query
        name: employee_id
        type: string
      - description: 'Filter by employee type 1: Doctor, 2: Nurse'
        in: query
        name: employee_type
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authmodel.ListEmployee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/basemodel.ApiError'
      security:
      - JWT: []
      summary: List Employee
      tags:
      - SA - Auth
  /auth/list-patient:
    get:
      consumes:
      - application/json
      description: List Employee
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      - description: Sort field. Default to name,asc
        enum:
        - name
        in: query
        name: sort
        type: string
      - description: Ignore pagination and return all data
        in: query
        name: paging_ignored
        type: boolean
      - description: Search by name
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/patientmodel.ListPatientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/basemodel.ApiError'
      security:
      - JWT: []
      summary: List Employee
      tags:
      - SA - Patient Management
  /auth/login:
    post:
      consumes:
      - application/json
      description: Employee Login
      parameters:
      - description: Login Request
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authmodel.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/basemodel.ApiError'
      security:
      - JWT: []
      summary: Employee Login
      tags:
      - SA - Auth
  /auth/pre-flight:
    post:
      consumes:
      - application/json
      description: Pre-flight Login
      parameters:
      - description: Request body
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/authmodel.GenerateLoginSecretRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authmodel.GenerateLoginSecretResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/basemodel.ApiError'
      summary: Pre-flight Login
      tags:
      - SA - Auth
  /patient/get-patient/{id}:
    get:
      consumes:
      - application/json
      description: Get Patient
      parameters:
      - description: Patient ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/patientmodel.GetPatientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/basemodel.ApiError'
      security:
      - JWT: []
      summary: Get Patient
      tags:
      - SA - Patient Management
  /patient/upsert-patient:
    post:
      consumes:
      - application/json
      description: Upsert Patient
      parameters:
      - description: Upsert patient Request
        in: body
        name: _
        required: true
        schema:
          $ref: '#/definitions/patient.UpsertPatientRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/basemodel.ApiEmptyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/basemodel.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/basemodel.ApiError'
      security:
      - JWT: []
      summary: Upsert Patient
      tags:
      - SA - Patient Management
swagger: "2.0"
